<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">

	<welcome-file-list>
		<welcome-file>index.jsp</welcome-file>
	</welcome-file-list>

	<!-- 어플리케이션 전체에서 사용하는 초기화 파라미터. application 에서 사용하며 getInitParameter(paramName), 
		getInitParameterNames() 로 사용 . 예를 들어 데이터베이스 연결과 관련된 설정 파일의 경로나, 로깅 설정 파일, 
		웹 어플리케이션의 주요 속성 정보를 담고 있는 파일의 경로등을 지정할 때 사용. -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath*:spring/context-*.xml</param-value>
	</context-param>

	<!-- Creates the Spring Container shared by all Servlets and Filters -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!-- Processes application requests -->
	<servlet>
		<servlet-name>action</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/config/*-servlet.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>action</servlet-name>
		<url-pattern>*.do</url-pattern>
	</servlet-mapping>

	<!-- CharacterEncodingFilter UTF-8 -->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>*.do</url-pattern>
	</filter-mapping>


	<!-- JSP 에서 include 디렉티브를 사용하기 위한 설정 값 
		 url-pattern : url 패턴 지정 
		 include-prelude : 모든 페이지 처음에 지정한 페이지가 삽입 됨.
		 include-coda : 모든 페이지 하단에 지정한 페이지가 삽입 됨. -->
	<jsp-config>
		<jsp-property-group>
			<url-pattern>*.jsp</url-pattern>
			<include-prelude>/WEB-INF/views/webConstraint/webConstraint.jspf</include-prelude>
			<include-prelude>/WEB-INF/views/etc/nav.jsp</include-prelude>
			<include-coda>/WEB-INF/views/etc/footer.jspf</include-coda>
		</jsp-property-group>
	</jsp-config>

 			
	<!-- Session Timeout 설정, 단위는 분 값을 0이나 음수로 설정하면 세션은 유효 시간을 갖지 않는다. session.invalidate() 
		를 호출하지 않는 이상 session 객체가 사라지지 않는다. (분 단위) -->
	<session-config>
		<session-timeout>10</session-timeout>
	</session-config>


	<!-- JSP 페이지 직접 접근 막기 -->
	<security-constraint>
		<display-name>JSP Protection</display-name>
		<web-resource-collection>
			<web-resource-name>SecureJSPPages</web-resource-name>
			<url-pattern></url-pattern>
		</web-resource-collection>
		<auth-constraint>
			<role-name>nobody</role-name>
		</auth-constraint>
	</security-constraint>

	<security-role>
		<description>
		Nobody should be in this role so JSP files are protected
		from direct access.
		</description>
		<role-name>nobody</role-name>
	</security-role>

	<!-- 접근 권한없음 : UNAUTHORIZED-->
	<error-page>
	  <error-code>403</error-code>
	  <location>/WEB-INF/views/error/403code.html</location>
	</error-page>

	<!-- 404 -->
	<error-page>
	  <error-code>404</error-code>
	  <location>/WEB-INF/views/error/404code.html</location>
	</error-page>

	<!-- 500 -->
	<error-page>
	  <error-code>500</error-code>
	  <location>/WEB-INF/views/error/500code.html</location>
	</error-page>

</web-app>
